@includeNamed{'/vertx-java/template/common-lib.templ'}
@code{

  /*
   * Returns the Ruby class qualified name for a given Vert.x Api interface
   * (for instance io.vertx.core.Vertx -> Vertx::Vertx), the generated name uses the module name the
   * Api interface belongs to.
   * @param type the type
   */
  def genRubyClassFqn(type) {
    if (type.parameterized) {
      return genRubyClassFqn(type.raw);
    } else {
      return "::" + type.module.getName(CASE_CAMEL) + "::" + type.simpleName;
    }
  }

  def genRubyDocType(type) {

    var kind = type.kind;
    if (kind == CLASS_OBJECT) {
      return "Object";
    } else if (kind == CLASS_JSON_OBJECT) {
      return "Hash{String => Object}";
    } else if (kind == CLASS_THROWABLE) {
      return "Exception";
    } else if (kind == CLASS_JSON_ARRAY) {
      return "Array<String,Object>";
    } else if (kind == CLASS_ASYNC_RESULT) {
      return "AsyncResult"; /* Find something better than that... */
    } else if (kind == CLASS_HANDLER || kind == CLASS_FUNCTION) {
      return "Proc";
    } else if (kind.collection) {
      if (kind == CLASS_LIST) {
        return "Array<" + genRubyDocType(type.args[0]) + ">";
      } else if (kind == CLASS_SET) {
        return "Set<" + genRubyDocType(type.args[0]) + ">";
      } else if (kind == CLASS_MAP) {
        return "Hash{" + genRubyDocType(type.args[0]) + " => " + genRubyDocType(type.args[1]) + "}";
      }
    } else if (kind == CLASS_DATA_OBJECT) {
      return genRubyDocType(type.getTargetJsonType());
    } else if (kind == CLASS_ENUM) {
      var buffer = "";
      boolean index = 0;
      for (value : type.values) {
        if (index > 0) {
          buffer += ",";
        }
        buffer += ":" + value;
        index = index + 1;
      }
      return buffer;
    } else if (kind.basic) {
      if (kind == CLASS_STRING) {
        return "String";
      } else {
        var typeName = type.name;
        if (typeName == "byte" || typeName == "java.lang.Byte" ||
            typeName == "short" || typeName == "java.lang.Short" ||
            typeName == "int" || typeName == "java.lang.Integer" ||
            typeName == "char" || typeName == "java.lang.Character" ||
            typeName == "long" || typeName == "java.lang.Long") {
          return "Fixnum";
        }
        if (typeName == "float" || typeName == "java.lang.Float" ||
            typeName == "double" || typeName == "java.lang.Double") {
          return "Float";
        }
        if (typeName == "boolean" || typeName == "java.lang.Boolean") {
          return "true,false";
        }
      }
    } else if (type.name == "java.lang.Number") {
      return "Fixnum";
    } else if (kind == CLASS_API) {
      return genRubyClassFqn(type.raw);
    }
    System.out.println("Untranslated type " + type + " with kind " + kind);
    return "Nil";
  }

  def renderLinkToHtml(link) {
    var rawType = link.targetType.raw;
    var label = link.label.trim();
    if (rawType.module != null) {
      var elt = link.targetElement;
      var rubyType = genRubyDocType(rawType);
      var kind = elt.getKind().name();
      if (kind == "CLASS" || kind == "INTERFACE") {
        return "{" + rubyType + label + "}";
      } else if (kind == "METHOD") {
        return "{" + rubyType + "#" + CASE_SNAKE.format(CASE_CAMEL.parse(elt.getSimpleName().toString())) + (label.length() > 0 ? " " : "") + label + "}";
      } else {
        System.out.println("Unhandled kind " + kind + " for " + link.targetType);
      }
    } else {
      if (label != null) {
        return label;
      } else {
        return genRubyDocType(link.targetType);
      }
    }
  }

  /*
   * Returns the Ruby file name include for a given Vert.x Api interface
   * (for instance io.vertx.core.Vertx -> vertx/vertx), the generated name uses the module name
   * the Api interface belongs to.
   * @param type the type
   */
  def genRubyClassInclude(type) {
    return type.module.getName(CASE_KEBAB) + "/" + type.getSimpleName(CASE_SNAKE);
  }
  /*
   * Returns the Ruby class qualified name for the Java type suitable for creating instances of the type
   * (for instance java.util.HashMap -> Java::JavaUtil::HashMap), the generated name uses the package name
   * of the type.
   * @param type the type
   */
  def genJavaClassFqn(type) {
    var kind = type.getKind();
    if (kind == CLASS_PRIMITIVE) {
      return "Java::" + type.simpleName;
    } else if (kind == CLASS_STRING) {
      return "Java::java.lang.String";
    } else if (kind == CLASS_HANDLER) {
      return "Java::IoVertxCore::Handler";
    } else if (kind == CLASS_FUNCTION) {
      return "Java::JavaUtilFunction::Function";
    } else if (kind == CLASS_OBJECT) {
      return "Java::java.lang.Object";
    } else {
      type = type.raw;
      return  "Java::" + CASE_CAMEL.format(CASE_QUALIFIED.parse(type.packageName)) + "::" + type.simpleName;
    }
  }

  /* Ruby reserved words */
  var reservedWords = new java.util.HashSet();
  reservedWords.add("alias");
  reservedWords.add("and");
  reservedWords.add("BEGIN");
  reservedWords.add("begin");
  reservedWords.add("def");
  reservedWords.add("elsif");
  reservedWords.add("END");
  reservedWords.add("end");
  reservedWords.add("ensure");
  reservedWords.add("in");
  reservedWords.add("module");
  reservedWords.add("next");
  reservedWords.add("nil");
  reservedWords.add("not");
  reservedWords.add("or");
  reservedWords.add("redo");
  reservedWords.add("rescue");
  reservedWords.add("retry");
  reservedWords.add("self");
  reservedWords.add("then");
  reservedWords.add("undef");
  reservedWords.add("unless");
  reservedWords.add("until");
  reservedWords.add("when");
  reservedWords.add("yield");

  /*
   * Generate a correct ruby name that does not clash with an identifier.
   */
  def genRubyName(name) {
    if (reservedWords.contains(name)) {
      return "_" + name
    } else {
      return name;
    }
  }

  /*
   * Generate a ruby method name for a given method.
   */
  def genMethodName(method) {
    var name = method.getName(CASE_SNAKE);
    if (method.returnType.name == "boolean" || method.returnType.name == "java.lang.Boolean") {
      if (name.startsWith("is_")) {
        name = name.substring(3);
      }
      name += "?";
    }
    return name;
  }

  /*
   * Returns the predicate for the specified type and expression that validates a Ruby object can be converted
   * to a specified Java object.
   * @param expr the expression that evaluates to the object to validate
   * @param type the type to validate
   */
  def genTypeCheckPredicate(expr, type) {
    var kind = type.kind;
    if (kind == CLASS_STRING) {
      return expr + ".class == String";
    } else if (kind == CLASS_THROWABLE) {
      return expr + ".is_a?(Exception)";
    } else if (kind == CLASS_ENUM) {
      return expr + ".class == Symbol";
    } else if (kind.basic) {
      var typeName = type.name;
      if (typeName == "byte" || typeName == "java.lang.Byte" ||
          typeName == "short" || typeName == "java.lang.Short" ||
          typeName == "int" || typeName == "java.lang.Integer" ||
          typeName == "char" || typeName == "java.lang.Character" ||
          typeName == "long" || typeName == "java.lang.Long") {
        return expr + ".class == Fixnum";
      }
      if (typeName == "float" || typeName == "java.lang.Float" ||
          typeName == "double" || typeName == "java.lang.Double") {
        return expr + ".class == Float";
      }
      if (typeName == "boolean" || typeName == "java.lang.Boolean") {
        return "(" + expr + ".class == TrueClass || " + expr + ".class == FalseClass)";
      }
    } else if (kind == CLASS_OBJECT) {
      if (type.variable) {
        if (type.classParam) {
          return "@j_arg_" + type.name + ".accept?(" + expr + ")";
        } else {
          var classTypeParam = method.resolveClassTypeParam(type);
          if (classTypeParam != null) {
            return '::Vertx::Util::Utils.v_type_of(' + classTypeParam.name + ').accept?(' + expr + ')';
          }
        }
      }
      return "::Vertx::Util::unknown_type.accept?(" + expr + ")";
    } else if (type.name == "java.lang.Number") {
      return expr + ".class == Fixnum";
   } else if (kind == CLASS_API) {
      return expr + ".class.method_defined?(:j_del)";
    } else if (kind == CLASS_HANDLER || kind == CLASS_FUNCTION) {
      return expr + ".class == Proc";
    } else if (kind == CLASS_JSON_OBJECT) {
      return expr + ".class == Hash";
    } else if (kind == CLASS_JSON_ARRAY) {
      return expr + ".class == Array";
    } else if (kind == CLASS_LIST) {
      return expr + ".class == Array";
    } else if (kind == CLASS_SET) {
      return expr + ".class == Set";
    } else if (kind == CLASS_MAP) {
      return expr + ".class == Hash";
    } else if (kind == CLASS_DATA_OBJECT) {
      return genTypeCheckPredicate(expr, type.getTargetJsonType())
    } else if (kind == CLASS_CLASS_TYPE) {
      return expr + ".class == Class";
    }
    return "false";
  }

  /*
   * Returns the method call for a given method.
   * @param method the called method
   * @param params the parameter names to use
   */
  def genMethodCall(method,params) {
    var args = "(";
    var signature = "(:" + method.getName() + ", [";
    var index = 1;
    if (method.params.size() > 0) {
      for (param : method.params) {
        if (param != method.params[0]) {
          args += ",";
          signature += ",";
        }
        args += genConvParam(param.type, params[index - 1]);
        signature += genJavaClassFqn(param.type) + ".java_class";
        index += 1;
      }
    }
    args += ")";
    signature += "])";
    /*
    return "(Java::IoVertxLangRuby::Helper.fixJavaMethod(" + (method.staticMethod ? genJavaClassFqn(type) : "@j_del") +
       ".java_class.declared_method" + signature +
       ")).invoke" + args;
    */
    return (method.staticMethod ? genJavaClassFqn(type) : "@j_del") + ".java_method" + signature + ".call" + args;
  }

  def genDecoderInstanceRef(type) {
    if (type.getJsonCodecInfo().getJsonDecoderEnclosingClass() != null) {
      return "Java::" + CASE_CAMEL.format(CASE_QUALIFIED.parse(type.getJsonCodecInfo().getJsonDecoderPackage())) + "::" + type.getJsonCodecInfo().getJsonDecoderEnclosingClass() + "::" +type.getJsonCodecInfo().getJsonDecoderSimpleName();
    } else {
      return "Java::" + CASE_CAMEL.format(CASE_QUALIFIED.parse(type.getJsonCodecInfo().getJsonDecoderPackage())) + "::" + type.getJsonCodecInfo().getJsonDecoderSimpleName();
    }
  }

  def genEncoderInstanceRef(type) {
    if (type.getJsonCodecInfo().getJsonEncoderEnclosingClass() != null) {
      return "Java::" + CASE_CAMEL.format(CASE_QUALIFIED.parse(type.getJsonCodecInfo().getJsonEncoderPackage())) + "::" + type.getJsonCodecInfo().getJsonEncoderEnclosingClass() + "::" + type.getJsonCodecInfo().getJsonEncoderSimpleName();
    } else {
      return "Java::" + CASE_CAMEL.format(CASE_QUALIFIED.parse(type.getJsonCodecInfo().getJsonEncoderPackage())) + "::" + type.getJsonCodecInfo().getJsonEncoderSimpleName();
    }
  }

  /*
   * Returns the Ruby expression that converts a Ruby object to a Java object given that
   * the expression is valid.
   * @param type the Java type to convert to
   * @param expr the expression that evaluates to the Ruby object
   */
  def genConvParam(type, expr) {
    var kind = type.kind;
    if (kind.basic) {
      if (type.name == "byte" || type.name == "java.lang.Byte") {
        return "::Vertx::Util::Utils.to_byte(" + expr + ")";
      } else if (type.name == "short" || type.name == "java.lang.Short") {
        return "::Vertx::Util::Utils.to_short(" + expr + ")";
      } else if (type.name == "integer" || type.name == "java.lang.Integer") {
        return "::Vertx::Util::Utils.to_integer(" + expr + ")";
      } else if (type.name == "float" || type.name == "java.lang.Float") {
        /* not tested */
        return "::Vertx::Util::Utils.to_float(" + expr + ")";
      } else if (type.name == "double" || type.name == "java.lang.Double") {
        /* not tested */
        return "::Vertx::Util::Utils.to_double(" + expr + ")";
      } else if (type.name == "char" || type.name == "java.lang.Character") {
        return "::Vertx::Util::Utils.to_character(" + expr + ")";
      } else {
        return expr;
      }
    } else if (type.name == "java.lang.Number") {
      return "::Vertx::Util::Utils.to_number(" + expr + ")";
    } else if (kind == CLASS_THROWABLE) {
        return "::Vertx::Util::Utils.to_throwable(" + expr + ")";
    } else if (kind == CLASS_HANDLER || kind == CLASS_FUNCTION) {
      var eventType = type.args[0];
      var eventKind = eventType.kind;
      if (eventKind.basic || eventKind == CLASS_DATA_OBJECT || eventKind.collection || eventKind == CLASS_API ||
          eventKind == CLASS_THROWABLE || eventKind == CLASS_OBJECT || eventKind.json || eventKind == CLASS_ENUM) {
        if (expr != "yield") {
          expr += ".call";
        }
        expr = expr + '(' + genConvReturn(eventType, 'event') + ')';
        if (kind == CLASS_FUNCTION) {
          expr =  genConvParam(type.args[1], expr);
        }
        return '(Proc.new { |event| ' + expr + ' })';
      } else if (eventKind == CLASS_VOID) {
        if (expr == "yield") {
          expr = "Proc.new { yield }";
        }
        return expr;
      } else if (eventKind == CLASS_ASYNC_RESULT) {
        var resultType = eventType.args[0];
        var resultKind = resultType.kind;
        if (resultKind.basic || resultKind == CLASS_DATA_OBJECT || resultKind.collection || resultKind == CLASS_API ||
            resultKind == CLASS_OBJECT || resultKind.json) {
          if (expr != "yield") {
            expr += ".call";
          }
          return "(Proc.new { |ar| " + expr + "(ar.failed ? ar.cause : nil, ar.succeeded ? " + genConvReturn(resultType, "ar.result") + " : nil) })";
        } else if (resultKind == CLASS_VOID) {
          if (expr != "yield") {
            expr += ".call";
          }
          return "(Proc.new { |ar| " + expr + "(ar.failed ? ar.cause : nil) })";
        }
      }
    } else if (kind == CLASS_API) {
      return expr + ".j_del";
    } else if (kind == CLASS_OBJECT) {
      if (type.variable) {
        if (type.classParam) {
          return "@j_arg_" + type.name + ".unwrap(" + expr + ")";
        } else {
          var classTypeParam = method.resolveClassTypeParam(type);
          if (classTypeParam != null) {
            return '::Vertx::Util::Utils.v_type_of(' + classTypeParam.name + ').unwrap(' + expr + ')';
          }
        }
      }
      return "::Vertx::Util::Utils.to_object(" + expr + ")";
    } else if (kind == CLASS_DATA_OBJECT) {
      if (type.isDataObjectAnnotatedType()) {
        return genJavaClassFqn(type) + ".new(" + genConvParam(type.getTargetJsonType(), expr) + ")";
      } else {
        return genDecoderInstanceRef(type) + "::INSTANCE.decode(" + genConvParam(type.getTargetJsonType(), expr) + ")";
      }
    } else if (kind == CLASS_JSON_OBJECT) {
      return "::Vertx::Util::Utils.to_json_object(" + expr + ")";
    } else if (kind == CLASS_JSON_ARRAY) {
      return "::Vertx::Util::Utils.to_json_array(" + expr + ")";
    } else if (kind == CLASS_ENUM) {
      return genJavaClassFqn(type) + ".valueOf(" + expr + ".to_s)";
    } else if (kind == CLASS_LIST) {
      var elementType = type.args[0];
      return expr + ".map { |element| " + genConvParam(elementType, "element") + " }";
    } else if (kind == CLASS_SET) {
      var elementType = type.args[0];
      return "Java::JavaUtil::LinkedHashSet.new(" + expr + ".map { |element| " + genConvParam(elementType, "element") + " })";
    } else if (kind == CLASS_MAP) {
      var valueType = type.args[1];
      return "Hash[" + expr + ".map { |k,v| [k," + genConvParam(valueType, "v") + "] }]";
    } else if (kind == CLASS_CLASS_TYPE) {
      return "::Vertx::Util::Utils.j_class_of(" + expr + ")";
    }
    return "nil";
  }

  /*
   * Returns the Ruby expression that converts a Java object to a Ruby object.
   * @param type the type of the Java object
   * @param expr the expression that evaluates to the Java object
   */
  def genConvReturn(type, expr) {
    if (type.name.equals("void")) {
      return expr;
    } else {
      var kind = type.kind;
      if (kind.basic || type.name == "java.lang.Number") {
        return expr;
      } else if (kind == CLASS_THROWABLE) {
        return "::Vertx::Util::Utils.from_throwable(" + expr + ")";
      } else if (kind == CLASS_DATA_OBJECT) {
        if (type.isDataObjectAnnotatedType()) {
          return expr + " != nil ? JSON.parse(" + expr + ".toJson.encode) : nil";
        } else {
          return genConvReturn(type.getTargetJsonType(), genEncoderInstanceRef(type) + "::INSTANCE.encode(" + expr + ")");
        }
      } else if (kind == CLASS_LIST) {
        var elementType = type.args[0];
        return expr + ".to_a.map { |elt| " + genConvReturn(elementType, "elt") + " }";
      } else if (kind == CLASS_SET) {
        var elementType = type.args[0];
        return "::Vertx::Util::Utils.to_set(" + expr + ").map! { |elt| " + genConvReturn(elementType, "elt") + " }";
      } else if (kind == CLASS_MAP) {
        var valueType = type.args[1];
        var valueKind = valueType.kind;
        var toJava = "::Vertx::Util::Utils.to_object(val)";
        if (valueKind == CLASS_JSON_OBJECT) {
          toJava = "::Vertx::Util::Utils.to_json_object(val)";
        } else if (valueKind == CLASS_JSON_ARRAY) {
          toJava = "::Vertx::Util::Utils.to_json_array(val)";
        } else if (valueKind.basic) {
          if (valueKind == CLASS_STRING) {
            toJava = "::Vertx::Util::Utils.to_string(val)";
          } else if (valueType.name == 'java.lang.Long') {
            toJava = "::Vertx::Util::Utils.to_long(val)";
          } else if (valueType.name == 'java.lang.Integer') {
            toJava = "::Vertx::Util::Utils.to_integer(val)";
          } else if (valueType.name == 'java.lang.Short') {
            toJava = "::Vertx::Util::Utils.to_short(val)";
          } else if (valueType.name == 'java.lang.Byte') {
            toJava = "::Vertx::Util::Utils.to_byte(val)";
          } else if (valueType.name == 'java.lang.Character') {
            toJava = "::Vertx::Util::Utils.to_character(val)";
          } else if (valueType.name == 'java.lang.Boolean') {
            toJava = "::Vertx::Util::Utils.to_boolean(val)";
          } else if (valueType.name == 'java.lang.Float') {
            toJava = "::Vertx::Util::Utils.to_float(val)";
          } else if (valueType.name == 'java.lang.Double') {
            toJava = "::Vertx::Util::Utils.to_double(val)";
          }
        } else if (type.name == "java.lang.Number") {
          toJava = "::Vertx::Util::Utils.to_number(" + expr + ")";
        } else if (valueKind == CLASS_API) {
          toJava = genConvParam(valueType, "val");
        }
        var toRuby = genConvReturn(valueType, "val");
        return "Java::IoVertxLangRuby::Helper.adaptingMap(" + expr + ", Proc.new { |val| " + toRuby + " }, Proc.new { |val| " + toJava + " })";
      } else if (kind == CLASS_API) {
        var foo = new StringBuilder();
        if (type.parameterized) {
          for (arg : type.args) {
            if (arg.kind == CLASS_API) {
              foo.append(',').append(genRubyClassFqn(arg)).append('.j_api_type');
            } else if (arg.kind == CLASS_DATA_OBJECT) {
              foo.append(',::Vertx::Util::data_object_type(').append(genJavaClassFqn(arg)).append(')');
            } else if (arg.kind == CLASS_ENUM) {
              foo.append(',::Vertx::Util::java_enum_type(').append(genJavaClassFqn(arg)).append(')');
            } else if (arg.kind == CLASS_OBJECT) {
              var classTypeParam = method.resolveClassTypeParam(arg);
              if (classTypeParam != null) {
                foo.append(', ::Vertx::Util::Utils.v_type_of(').append(classTypeParam.name).append(')');
              } else {
                foo.append(', nil');
              }
            } else {
              foo.append(', nil');
            }
          }
        }
        return "::Vertx::Util::Utils.safe_create(" + expr + "," + genRubyClassFqn(type.raw) + (type.raw.concrete ? "" : "Impl") + foo +  ")";
      } else if (kind.json) {
        return expr + " != nil ? JSON.parse(" + expr + ".encode) : nil";
      } else if (kind == CLASS_OBJECT) {
        if (type.variable) {
          if (type.classParam) {
            return "@j_arg_" + type.name + ".wrap(" + expr + ")";
          }
          if (method != null) {
            /* work around for failure */
            var reflect = method.getClass().getMethod("resolveClassTypeParam", type.getClass());
            var abc = reflect.invoke(method, type);
            if (abc != null) {
              return '::Vertx::Util::Utils.v_type_of(' + abc.name +  ').wrap(' + expr + ')';
            }
          }
        }
        return "::Vertx::Util::Utils.from_object(" + expr + ")";
      } else if (kind == CLASS_ENUM) {
        return expr + ".name.intern";
      } else if (kind == CLASS_HANDLER) {
        var resultType = type.args[0];
        if (resultType.kind == CLASS_ASYNC_RESULT) {
          return "::Vertx::Util::Utils.to_async_result_handler_proc(" +  expr +  ") { |val| " + genConvParam(resultType.args[0], "val") + " }";
        } else {
          return "::Vertx::Util::Utils.to_handler_proc(" +  expr +  ") { |val| " + genConvParam(resultType, "val") + " }";
        }
      }
      return "nil";
    }
  }

  /*
   * Append an entry to a Trie structure. The Trie structure is created from the overloaded methods parameters
   * and is used to know if we need to name the method parameters in a generic fashion or not.
   *
   * for example:
   * - Buffer buffer()
   * - Buffer buffer(int initialSizeHint)
   * - Buffer buffer(String string))
   * - Buffer buffer(String string, String enc)
   *
   * gives {int:{},String:{String)} that generates the Ruby code
   *
   * def self.buffer(param_1=nil,param_2=nil)
   *   if param_1.class == String
   *     if param_2.class == String
   *       return Vertx::Buffer.new(Java::IoVertxCoreBuffer::Buffer.buffer(param_1,param_2))
   *     end
   *     return Vertx::Buffer.new(Java::IoVertxCoreBuffer::Buffer.buffer(param_1))
   *   end
   *   if param_1.class == Fixnum
   *     return Vertx::Buffer.new(Java::IoVertxCoreBuffer::Buffer.buffer(param_1))
   *   end
   *   return Vertx::Buffer.new(Java::IoVertxCoreBuffer::Buffer.buffer)
   * end
   *
   * note: last param handlers are willingly not used in the trie as they are handled using `yield` and
   *       not as a method param.
   *
   * @param trie the trie as a Map<ParamInfo, Map<ParamInfo, Map<...>>>
   * @param entry the entry as an Iterator<ParamInfo>
   */
  def trieAppend(trie, params) {
    if (params.hasNext()) {
      var first = params.next();
      if (first.type.kind == CLASS_HANDLER && !params.hasNext()) {
        return true;
      }
      if (!trie.containsKey(first.type)) {
        trie.put(first.type, new java.util.HashMap());
      }
      return trieAppend(trie.get(first.type), params);
    } else {
      return trie;
    }
  }
  /*
   * Returns the trie kind:
   * 0 : empty
   * 1 : linear
   * 2 : multiarg
   * @param trie the trie
   */
  def trieKind(trie) {
    if (trie.isEmpty()) {
      return 0;
    } else if (trie.size() == 1) {
      var kind = trieKind(trie.get(trie.keySet().iterator().next()));
      if (kind == 2) {
        return 2;
      }
      return 1;
    } else {
      return 2;
    }
  }

  /*
   * Returns the trie height
   * @param trie the trie
   */
  def trieHeight(trie) {
    if (trie.isEmpty()) {
      return 0;
    } else {
      var max = 0;
      for (child : trie.values()) {
        var height = trieHeight(child) + 1;
        if (height > max) {
          max = height;
        }
      }
      return max;
    }
  }

  /*
   * Returns the code for indenting properly, given the actual _trie stack size.
   */
  def genIndent() {
    var builder = new java.lang.StringBuilder('  ');
    for (i:_trie.size()) {
      builder.append('  ');
    }
    return builder.toString();
  }
}

@comment{"Generate the require"}
@foreach{referencedType : referencedTypes}
require '@{genRubyClassInclude(referencedType.raw)}'\n
@end{}
require 'vertx/util/utils.rb'\n

@declare{'initializer'}
    # @private\n
    # @param j_del [@{genRubyClassFqn(type.raw)}] the java delegate\n
    def initialize(j_del@foreach{param: type.params}, j_arg_@{param.name}=nil@end{})\n
	@if{callSuper}
      super(j_del
			@if{concreteSuperType.parameterized}@foreach{arg:concreteSuperType.args}
				@if{arg.kind == CLASS_API}
				, @{genRubyClassFqn(arg)}.j_api_type
				@else{arg.variable}
				, j_arg_@{arg.name}
				@else{}
				, nil
				@end{}
			@end{}@end{}
			)\n
	@end{}
      @j_del = j_del\n
	@foreach{param: type.params}
      @{'@j_arg_' + param.name} = j_arg_@{param.name} != nil ? j_arg_@{param.name} : ::Vertx::Util::unknown_type\n
	@end{}
    end\n
    # @private\n
    # @return [@{genRubyClassFqn(type.raw)}] the underlying java delegate\n
    def j_del\n
      @j_del\n
    end\n
	@if{type.params.empty}
    @{'@@'}j_api_type = Object.new\n
    def @{'@@'}j_api_type.accept?(obj)\n
      obj.class == @{type.raw.simpleName}\n
    end\n
    def @{'@@'}j_api_type.wrap(obj)\n
      @{type.raw.simpleName}.new(obj)\n
    end\n
    def @{'@@'}j_api_type.unwrap(obj)\n
      obj.j_del\n
    end\n
    def self.j_api_type\n
      @{'@@'}j_api_type\n
    end\n
    def self.j_class\n
      @{genJavaClassFqn(type)}.java_class\n
    end\n
	@end{}
@end{}

# Generated from @{type.name}\n
module @{type.raw.module.getName(CASE_CAMEL)}\n

@if{concrete}
	@if{doc != null}
		@{renderDocToHtml("  # ", doc, renderLinkToHtml)}
	@end{}
  class @{type.raw.simpleName}@if{concreteSuperType != null} < @{genRubyClassFqn(concreteSuperType.raw)}@end{}\n
	@foreach{abstractSuperType:abstractSuperTypes}
    include @{genRubyClassFqn(abstractSuperType.raw)}\n
	@end{}
	@includeNamed{'initializer';callSuper=concreteSuperType != null}
@else{}
  module @{type.raw.simpleName}\n
	@foreach{superType:superTypes}
    include @{genRubyClassFqn(superType.raw)}\n
	@end{}
@end{}

@comment{"Generate the method dispatch (i.e the body of the method) for the current `methods` list"}
@declare{'genMethodDispatch'}
	@code{previous=false}
	@foreach{method:methods}
		@code{paramNames=new java.util.ArrayList()}
		@code{remainingParams=new java.util.LinkedList(params)}
		@code{checks=new java.util.LinkedList()}
		@foreach{param:method.params}
			@if{paramNames.size() + 1 == method.params.size() && (param.type.kind == CLASS_HANDLER || param.type.kind == CLASS_FUNCTION)}
				@code{checks.add("block_given?")}
				@code{paramNames.add("yield")}
			@else{}
				@code{paramName=remainingParams.removeFirst()}
				@code{checks.add(genTypeCheckPredicate(paramName, param.type))}
				@code{paramNames.add(paramName)}
			@end{}
		@end{}
		@if{checks.empty || checks.peekLast() != "block_given?"}
			@code{checks.add("!block_given?")}
		@end{}
		@foreach{remainingParam:remainingParams}
			@code{checks.add(remainingParam + " == nil")}
		@end{}
      @if{!previous}if@else{}elsif@end{} @foreach{check:checks}@{check}@end{" && "}\n
		@if{method.fluent}
        @{genMethodCall(method,paramNames)}\n
        return self\n
		@else{}
			@if{method.cacheReturn}
				@code{cacheKey="@cached_" + method.getName(CASE_SNAKE)}
				@code{cacheDecl=cacheKey + " = "}
        if @{cacheKey} != nil\n
          return @{cacheKey}\n
        end\n
			@else{}
				@code{cacheDecl=""}
			@end{}
        return @{cacheDecl}@{genConvReturn(method.returnType, genMethodCall(method,paramNames))}\n
		@end{}
		@code{previous=true}
	@end{}
	@if{previous}
      end\n
	@end{}
      raise ArgumentError, "Invalid arguments when calling @{methodName}(@foreach{param:params}#{@{param}}@end{","})"\n
@end{}

@comment{""}
@declare{'methodParamsTags'}
	@foreach{param:methodParams}
		@code{description = param.description != null ? renderTokensToHtml("", param.description.tokens, renderLinkToHtml, "") : ""}
		@if{param == methodParams[methodParams.size() - 1] && (param.type.kind == CLASS_HANDLER || param.type.kind == CLASS_FUNCTION)}
    # @{indent}@yield @{description}\n
		@else{}
    # @{indent}@param [@{genRubyDocType(param.type)}] @{genRubyName(param.name)} @{description}\n
		@end{}
	@end{}
@end{}

	@foreach{methods:methodsByName.values()}

		@code{lastMethod=methods[methods.size()-1]}
		@code{methodName=genMethodName(methods[0])}
		@code{methodDecl=(methods[0].staticMethod ? "self." : "") + methodName}
		@code{trie = new java.util.HashMap()}
		@foreach{method:methods}
			@code{trieAppend(trie, method.params.iterator())}
		@end{}
		@code{kind = trieKind(trie)}

		@code{params=new java.util.ArrayList()}
		@foreach{index:trieHeight(trie)}
			@if{kind == 0 || kind == 1}
				@code{params.add(genRubyName(lastMethod.params[index].name))}
			@else{}
				@code{params.add("param_" + (index + 1))}
			@end{}
		@end{}

		@if{lastMethod.doc != null}
			@{renderDocToHtml("    # ", lastMethod.doc, renderLinkToHtml)}
		@end{}
		@if{kind != 2}
			@includeNamed{'methodParamsTags';methodParams=lastMethod.params;indent=''}
		@else{}
			@foreach{method:methods}
    # @overload @{method.name}(@foreach{param:method.params}@{param.name}@end{","})\n
				@includeNamed{'methodParamsTags';methodParams=method.params;indent='  '}
			@end{}
		@end{}
		@if{lastMethod.fluent}
    # @return [self]\n
		@else{lastMethod.returnType.simpleName == "void"}
    # @return [void]\n
		@else{}
    # @return [@{genRubyDocType(lastMethod.returnType)}]@if{lastMethod.returnDescription != null} @{renderTokensToHtml("", lastMethod.returnDescription.tokens, renderLinkToHtml, "")}@end{}\n
		@end{}
    def @{methodDecl}@if{params.size() > 0}(
		@code{index=0}@foreach{param:params}
		@code{index++}
		@{param}=nil
		@end{","})@end{}\n
		@includeNamed{'genMethodDispatch'}
    end\n

	@end{}

	@foreach{constant:constants}
		@if{constant.doc != null}
			@{renderDocToHtml("    # ", constant.doc, renderLinkToHtml)}
		@end{}
    def self.@{constant.name}\n
      @{genConvReturn(constant.type, genJavaClassFqn(type) + '.' + constant.name)}\n
    end\n
	@end{}

  end\n

@comment{"The mixin implementing the class for abstract interfaces"}
@if{!concrete}
  class @{type.raw.simpleName}Impl\n
    include @{type.raw.simpleName}\n
	@includeNamed{'initializer';callSuper=false}
  end\n
@end{}

end\n
